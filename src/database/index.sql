CREATE SCHEMA LEARNING_SYSTEM;
USE LEARNING_SYSTEM;

CREATE TABLE PERSON (
	SSN CHAR(9) PRIMARY KEY CHECK(SSN REGEXP '[0-9]{9}'),
    FNAME VARCHAR(15),
    LNAME VARCHAR(15),
    GENDER CHAR CHECK(GENDER IN ('M', 'F')),
    BIRTHDAY DATE,
    EMAIL VARCHAR(30) CHECK(EMAIL LIKE '%@%')
);

CREATE TABLE FACULTY (
	FACULTY_CODE CHAR(9) PRIMARY KEY,
    FACULTY_NAME VARCHAR(15)
);

CREATE TABLE AUTHOR (
	AUTHOR_ID CHAR(9) PRIMARY KEY
);

CREATE TABLE PUBLISHER (
	PUBLISHER_NAME VARCHAR(15) PRIMARY KEY
);

CREATE TABLE STUDENT (
	STUDENT_ID CHAR(7) PRIMARY KEY CHECK (STUDENT_ID REGEXP '[0-9]{7}'),
    SSN CHAR(9) UNIQUE NOT NULL,
    GPA DECIMAL(3, 1) CHECK(GPA >= 0 AND GPA <= 10),
    FCODE CHAR(9) NOT NULL,
    FOREIGN KEY (FCODE) REFERENCES FACULTY(FACULTY_CODE),
    FOREIGN KEY (SSN) REFERENCES PERSON(SSN)
);

CREATE TABLE STAFF (
	STAFF_ID CHAR(7) PRIMARY KEY CHECK (STAFF_ID REGEXP '[0-9]{7}'),
    SSN CHAR(9) UNIQUE NOT NULL CHECK (SSN REGEXP '[0-9]{9}'),
    FCODE CHAR(9) NOT NULL,
    FOREIGN KEY (FCODE) REFERENCES FACULTY(FACULTY_CODE),
    FOREIGN KEY (SSN) REFERENCES PERSON(SSN)
);

CREATE TABLE MANAGEMENT_INSTRUCTOR(
	STAFF_ID CHAR(7) PRIMARY KEY,
    ACADEMIC_RANK VARCHAR(3) CHECK (ACADEMIC_RANK IN ('GS', 'PGS')),
    FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID)
);

CREATE TABLE INSTRUCTOR (
	STAFF_ID CHAR(7) PRIMARY KEY,
    DEGREE VARCHAR(9) CHECK (DEGREE IN ('Bachelor', 'Master', 'Doctor')),
    MGR_ID CHAR(7) NOT NULL,
    FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID),
    FOREIGN KEY (MGR_ID) REFERENCES MANAGEMENT_INSTRUCTOR(STAFF_ID)
);

CREATE TABLE AAO_STAFF (
	STAFF_ID CHAR(7) PRIMARY KEY,
    SKILL VARCHAR(15),
    FOREIGN KEY (STAFF_ID) REFERENCES STAFF(STAFF_ID)
);

CREATE TABLE MAJOR_INSTRUCTOR(
	STAFF_ID CHAR(7) PRIMARY KEY,
    EXPERIENCE INT CHECK(EXPERIENCE >= 0),
    FOREIGN KEY (STAFF_ID) REFERENCES INSTRUCTOR(STAFF_ID)
);

CREATE TABLE DOCUMENT(
	ISBN CHAR(17) PRIMARY KEY CHECK (ISBN REGEXP '[0-9]{3}-[0-9]-[0-9]{6}-[0-9]{2}-[0-9]'),
    DOCUMENT_NAME VARCHAR(15),
    PUBLISHER_NAME VARCHAR(15) NOT NULL,
    FOREIGN KEY (PUBLISHER_NAME) REFERENCES PUBLISHER(PUBLISHER_NAME)
);

CREATE TABLE COURSE(
	COURSE_ID CHAR(5) PRIMARY KEY,
    COURSE_NAME VARCHAR(15),
    CREDIT INT CHECK (CREDIT >= 1 AND CREDIT <= 3),
    FCODE CHAR(9) NOT NULL,
    FOREIGN KEY (FCODE) REFERENCES FACULTY(FACULTY_CODE)
);

CREATE TABLE CLASS (
	COURSE_ID CHAR(5),
    CLASS_ID CHAR(5),
    SEMESTER CHAR(3) NOT NULL, -- HỌC KỲ
    CYEAR INT NOT NULL CHECK (CYEAR > 0),
    PERIOD INT CHECK (PERIOD >= 1 AND PERIOD <= 14), -- SỐ TIẾT
    AMOUNT INT CHECK (AMOUNT > 0 AND AMOUNT <= 60),
    PRIMARY KEY (COURSE_ID, CLASS_ID),
    CONSTRAINT SECONDARY_KEY UNIQUE (SEMESTER, CYEAR),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
);

CREATE TABLE CLASS_GROUP (
	COURSE_ID CHAR(5),
    CLASS_ID CHAR(5),
    ORDER_NO INT CHECK (ORDER_NO > 0),
    PRIMARY KEY (COURSE_ID, CLASS_ID, ORDER_NO),
    FOREIGN KEY (COURSE_ID, CLASS_ID) REFERENCES CLASS(COURSE_ID, CLASS_ID)
);

CREATE TABLE WEEK_OF_STUDY (
	COURSE_ID CHAR(5),
    CLASS_ID CHAR(5),
    ORDER_NO INT,
    WEEK_ORDER_NO INT CHECK (WEEK_ORDER_NO > 0),
    PRIMARY KEY (COURSE_ID, CLASS_ID, ORDER_NO, WEEK_ORDER_NO),
    FOREIGN KEY (COURSE_ID, CLASS_ID, ORDER_NO) REFERENCES CLASS_GROUP(COURSE_ID, CLASS_ID, ORDER_NO)
);

CREATE TABLE REGISTER (
	STUDENT_ID CHAR(7),
    COURSE_ID CHAR(5),
    REGISTER_TIME DATETIME,
    PRIMARY KEY (STUDENT_ID, COURSE_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID)
);

CREATE TABLE PARRALLEL_COURSE(
	COURSE_ID CHAR(5),
    P_COURSE CHAR(5),
    PRIMARY KEY (COURSE_ID, P_COURSE),
    CHECK (COURSE_ID <> P_COURSE),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
    FOREIGN KEY (P_COURSE) REFERENCES COURSE(COURSE_ID)
);

CREATE TABLE DECISION_COURSE(
	COURSE_ID CHAR(5),
    D_COURSE CHAR(5),
    PRIMARY KEY (COURSE_ID, D_COURSE),
    CHECK (COURSE_ID <> D_COURSE),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
    FOREIGN KEY (D_COURSE) REFERENCES COURSE(COURSE_ID)
);

CREATE TABLE AUTHOR_WRITE (
	AUTHOR_ID CHAR(9),
    DOC_ISBN CHAR(17),
    PRIMARY KEY (AUTHOR_ID, DOC_ISBN),
    FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID),
    FOREIGN KEY (DOC_ISBN) REFERENCES DOCUMENT(ISBN)
);

CREATE TABLE USE_DOCUMENT (
	COURSE_ID CHAR(5),
    DOC_ISBN CHAR(17),
    PRIMARY KEY (COURSE_ID, DOC_ISBN),
	FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
    FOREIGN KEY (DOC_ISBN) REFERENCES DOCUMENT(ISBN)
);

CREATE TABLE STUDY (
	STUDENT_ID CHAR(7),
    COURSE_ID CHAR(5),
    CLASS_ID CHAR(5),
    ORDER_NO INT,
    PRIMARY KEY (STUDENT_ID, COURSE_ID, CLASS_ID, ORDER_NO),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID),
    FOREIGN KEY (COURSE_ID, CLASS_ID, ORDER_NO) REFERENCES CLASS_GROUP(COURSE_ID, CLASS_ID, ORDER_NO)
);

CREATE TABLE SAVE_SCORE (
	STUDENT_ID CHAR(7),
    COURSE_ID CHAR(5),
    MAJOR_INSTRUCTOR_ID CHAR(7) NOT NULL,
    RESULT DECIMAL(3, 1) CHECK (RESULT >= 0 AND RESULT <= 10),
    PRIMARY KEY (STUDENT_ID, COURSE_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSE(COURSE_ID),
    FOREIGN KEY (MAJOR_INSTRUCTOR_ID) REFERENCES MAJOR_INSTRUCTOR(STAFF_ID)
);

CREATE TABLE DECIDE(
	INSTRUCTOR_ID CHAR(7),
    DOC_ISBN CHAR(17),
    COURSE_ID CHAR(5),
    CLASS_ID CHAR(5),
    PRIMARY KEY (INSTRUCTOR_ID, DOC_ISBN, COURSE_ID, CLASS_ID),
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES INSTRUCTOR(STAFF_ID),
    FOREIGN KEY (DOC_ISBN) REFERENCES DOCUMENT(ISBN),
    FOREIGN KEY (COURSE_ID, CLASS_ID) REFERENCES CLASS(COURSE_ID, CLASS_ID)
);

CREATE TABLE PERSON_PHONE (
	PSSN CHAR(9),
    APHONE CHAR(10) CHECK (APHONE REGEXP '[0-9]{10}'),
    PRIMARY KEY (PSSN, APHONE),
    FOREIGN KEY (PSSN) REFERENCES PERSON (SSN)
);

CREATE TABLE STATUS_LEARNING (
	STUDENT_ID CHAR(7),
    STUDENT_STATUS VARCHAR(15) CHECK (STUDENT_STATUS IN ("Studying", "Pause", "Stop")),
    CURRENT_SEMESTER CHAR(3),
    PRIMARY KEY (STUDENT_ID, STUDENT_STATUS, CURRENT_SEMESTER),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENT(STUDENT_ID)
);

CREATE TABLE DOCUMENT_CATEGORY (
	DOC_ISBN CHAR(17),
    ACATEGORY VARCHAR(15),
    PRIMARY KEY (DOC_ISBN, ACATEGORY),
    FOREIGN KEY (DOC_ISBN) REFERENCES DOCUMENT(ISBN)
);

CREATE TABLE AUTHOR_EMAIL (
	AUTHOR_ID CHAR(9),
    AEMAIL VARCHAR(30) CHECK(AEMAIL LIKE '%@%'),
    PRIMARY KEY (AUTHOR_ID, AEMAIL),
    FOREIGN KEY (AUTHOR_ID) REFERENCES AUTHOR(AUTHOR_ID)
);

CREATE TABLE PUBLISHING_YEAR (
	PNAME VARCHAR(15),
    AYEAR INT CHECK (AYEAR > 0),
    PRIMARY KEY (PNAME, AYEAR),
    FOREIGN KEY (PNAME) REFERENCES PUBLISHER(PUBLISHER_NAME)
);

CREATE TABLE PUBLISHING_TYPE (
	PNAME VARCHAR(15),
    ATYPE VARCHAR(15),
    PRIMARY KEY (PNAME, ATYPE),
    FOREIGN KEY (PNAME) REFERENCES PUBLISHER(PUBLISHER_NAME)
);